(c)Any use of this software must adhere to the rules under the GPL

This Software provides a basic stateful IRC bot written in the spare time of a broke and bored college
Student. Keep that in mind as you poke around my code. I am open for pointers and suggestion.


RaBot
(Racoon's Bot Framework)


This project is a framework for creating IRC bots using simple configuration and setup. Two files are
necessary to begin Execution. Secrets.hs and Commands. Both of these files are required and need some input
before anything will move. Provided in the repo are two samples of these files. Commands contains some simple
commands (namely the all powerful 'reload' command). Secrets_Examples.hs contains all personal variables
that are used throughout the bot. Things like the bot's nick, the master's nick, the irc server, the initial channel
and more are contained in this file. Fill these out accordingly, and rename to Secrets.hs. 


The Command is at the heart of the Bot. The Entire framework is based around the idea of having a dynamic
file where commands are kept and reloaded. This alows the bot operator the ability to change the behavior
of the bot in mid execution without bringing the whole thing down. Other benifits of command abstraction
include being able to build a bot through behavioral descriptions and reactions, that themselves are objects
that can be passed, modified and viewed, rather than hardcoded mechanisms of the bot. that are internal
and hidden.

Command = Command { state   :: C_State
                  , auth    :: [String]
                  , usage   :: String
                  , desc    :: String
                  , trigger :: [C_Trigger]
                  , action  :: [C_Action] }


The Command structure
The commands will take this form in the command file
   state          -> Single state for the command
   auth           -> List of users that may use the command
   usage          -> A string detailing how to use the command
   desc           -> A description of what the command does
   trigger        -> A list of triggers in which all must be true
   action         -> A list of actions that the command will execute

------------------------------------------------------------------------------------------------------------------
Command States
   Active         -> When the Bot is beckoned
   Passive        -> When the bot is not directly beckoned
   Always         -> For every message in IRC
   Never          -> You may as well just forget about ever seeing this 
                     command executed

------------------------------------------------------------------------------------------------------------------
Triggers
How will we know when to execute a given command? One Word: Triggers
   AllMessages    -> Triggers command for all messages
   FirstWord      -> The first word in the message matches a given regex
   WordPresent    -> Some string matching the Regex is present in the message

------------------------------------------------------------------------------------------------------------------
Actions
The actions are how we will specify the desired action for the command
   Respond        -> Say something in a channel, the message is dictated by the 
                     list of args that will concatenate and the response will 
                     land in the channel specified by the Destination
   JoinChannel    -> join the channel specifed
   ReloadCommands -> reload the commands in the command file
   LogToFile      -> Log to a file specified by the first args, the content 
                     specified by the second
   LoadCannons    -> Load all commands into the bot's payload to be fired later
   FireCannons    -> Execute the bots payload

------------------------------------------------------------------------------------------------------------------
The BotActions are what the module will strive to return to the calling program
Ready to be interpreted and used
   SayToServer    -> Send a line ot the server
   SayToTerm      -> send some output to the terminal
   Reload         -> Reload the commands
   Log            -> log to a file

------------------------------------------------------------------------------------------------------------------
Arguments
The Arguments Allow us to construct Context Aware Messages that we can output 
back to the user
   NULL           -> Null, Return an empty
   Literal        -> Stands for the exact string specified
   WordAfter      -> Replaces itself with the word Directly following the Regex
   AllWordsAfter  -> Is replaced By all of the text that comes after the match
   Nickname       -> The nicname of the user sending the message
   Username       -> Username of the message's source
   FirstChannel   -> The first channel that comes appears in the message
   Channel        -> The channel that the message is originating
   Hostname       -> Hostname that the user is connecting from
   WholeMessage   -> The entire message field
   AllFields      -> The whole message struct including all fields

------------------------------------------------------------------------------------------------------------------
Destination
The destination of an Irc Message Message
   To_Current     -> Sends the message to the current window, in which the IRC
                     line originated
   To_Server      -> Sends a message to the server with no Channel used as a
                     Destination
   To_Channel     -> Send the output to a specified channel (or through query)

